{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { POSTS_FAIL, POSTS_LOADING, POSTS_SUCCESS, POST_SUCCESS } from '../types/types';\nconst initialState = {\n  posts: [],\n  isLoading: false\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case POSTS_LOADING:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoading: !state.isLoading\n      });\n\n    case POSTS_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        posts: [...action.payload]\n      });\n\n    case POSTS_FAIL:\n      return state;\n\n    case POST_SUCCESS:\n      return {};\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/mvp-blog-typescript/src/redux/reducers/reducer.ts"],"names":["POSTS_FAIL","POSTS_LOADING","POSTS_SUCCESS","POST_SUCCESS","initialState","posts","isLoading","reducer","state","action","type","payload"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,aAArB,EAAoCC,aAApC,EAAmDC,YAAnD,QAAuE,gBAAvE;AAOA,MAAMC,YAA2B,GAAG;AAClCC,EAAAA,KAAK,EAAE,EAD2B;AAElCC,EAAAA,SAAS,EAAE;AAFuB,CAApC;;AAMA,MAAMC,OAAO,GAAG,CAACC,KAAoB,GAAGJ,YAAxB,EAAsCK,MAAtC,KAAiD;AAC/D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,aAAL;AACE,6CAAYO,KAAZ;AAAmBF,QAAAA,SAAS,EAAE,CAACE,KAAK,CAACF;AAArC;;AAEF,SAAKJ,aAAL;AACE,6CAAYM,KAAZ;AAAmBH,QAAAA,KAAK,EAAE,CAAC,GAAGI,MAAM,CAACE,OAAX;AAA1B;;AAEF,SAAKX,UAAL;AACE,aAAOQ,KAAP;;AAEF,SAAKL,YAAL;AACE,aAAO,EAAP;;AAEF;AACE,aAAOK,KAAP;AAdJ;AAgBD,CAjBD;;AAmBA,eAAeD,OAAf","sourcesContent":["import { POSTS_FAIL, POSTS_LOADING, POSTS_SUCCESS, POST_SUCCESS } from '../types/types';\r\n\r\ninterface InitialStateI {\r\n  posts: any;\r\n  isLoading: boolean\r\n}\r\n\r\nconst initialState: InitialStateI = {\r\n  posts: [],\r\n  isLoading: false,\r\n};\r\n\r\n\r\nconst reducer = (state: InitialStateI = initialState, action) => {\r\n  switch (action.type) {\r\n    case POSTS_LOADING:\r\n      return { ...state, isLoading: !state.isLoading };\r\n\r\n    case POSTS_SUCCESS:\r\n      return { ...state, posts: [...action.payload] };\r\n\r\n    case POSTS_FAIL:\r\n      return state;\r\n\r\n    case POST_SUCCESS:\r\n      return {}\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}