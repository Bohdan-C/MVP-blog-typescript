{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createReducer } from \"@reduxjs/toolkit\";\nconst initialState = {\n  posts: []\n};\nexport const getPostsReducer = action => createReducer(initialState, {\n  [action.getAllPosts]: (state, {\n    payload\n  }) => {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      tasks: payload\n    });\n  }\n});","map":{"version":3,"sources":["C:/mvp-blog-typescript/src/redux/reducers/reducer.ts"],"names":["createReducer","initialState","posts","getPostsReducer","action","getAllPosts","state","payload","tasks"],"mappings":";;;;;;AAAA,SAASA,aAAT,QAA8B,kBAA9B;AAOA,MAAMC,YAA2B,GAAG;AAChCC,EAAAA,KAAK,EAAE;AADyB,CAApC;AAIA,OAAO,MAAMC,eAAe,GAAIC,MAAD,IAAYJ,aAAa,CAACC,YAAD,EAAe;AACnE,GAACG,MAAM,CAACC,WAAR,GAAsB,CAACC,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,KAAwB;AAC5C,2CAAYD,KAAZ;AAAmBE,MAAAA,KAAK,EAAED;AAA1B;AACD;AAHkE,CAAf,CAAjD","sourcesContent":["import { createReducer } from \"@reduxjs/toolkit\";\r\nimport * as action from \"../actions/actions\";\r\n\r\ninterface InitialStateI {\r\n    posts: any\r\n}\r\n\r\nconst initialState: InitialStateI = {\r\n    posts: [],\r\n  };\r\n\r\nexport const getPostsReducer = (action) => createReducer(initialState, {\r\n    [action.getAllPosts]: (state, { payload }) => {\r\n      return { ...state, tasks: payload };\r\n    },\r\n})"]},"metadata":{},"sourceType":"module"}