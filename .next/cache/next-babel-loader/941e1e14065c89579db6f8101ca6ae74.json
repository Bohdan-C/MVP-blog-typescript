{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst initialState = {\n  posts: [],\n  isLoading\n};\n\nconst reducer = (state = postInitialState, action) => {\n  switch (action.type) {\n    case GET_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoading: !state.isLoading\n      });\n\n    case SUCCESS_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        imgs: [...action.payload]\n      });\n\n    case ERROR_DATA:\n      return state;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/mvp-blog-typescript/src/redux/reducers/reducer.ts"],"names":["initialState","posts","isLoading","reducer","state","postInitialState","action","type","GET_DATA","SUCCESS_DATA","imgs","payload","ERROR_DATA"],"mappings":";;;;;;AAMA,MAAMA,YAA2B,GAAG;AAChCC,EAAAA,KAAK,EAAE,EADyB;AAEhCC,EAAAA;AAFgC,CAApC;;AAKE,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGC,gBAAT,EAA2BC,MAA3B,KAAsC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKC,QAAL;AACI,6CAAYJ,KAAZ;AAAmBF,QAAAA,SAAS,EAAE,CAACE,KAAK,CAACF;AAArC;;AAEJ,SAAKO,YAAL;AACI,6CAAYL,KAAZ;AAAmBM,QAAAA,IAAI,EAAE,CAAC,GAAGJ,MAAM,CAACK,OAAX;AAAzB;;AAEJ,SAAKC,UAAL;AACI,aAAOR,KAAP;;AAEJ;AACI,aAAOA,KAAP;AAXR;AAaH,CAdC","sourcesContent":["import { POSTS_FAIL, POSTS_LOADING, POSTS_SUCCESS } from '../types/types';\r\n\r\ninterface InitialStateI {\r\n    posts: any\r\n}\r\n\r\nconst initialState: InitialStateI = {\r\n    posts: [],\r\n    isLoading\r\n  };\r\n\r\n  const reducer = (state = postInitialState, action) => {\r\n    switch (action.type) {\r\n        case GET_DATA:\r\n            return { ...state, isLoading: !state.isLoading };\r\n\r\n        case SUCCESS_DATA:\r\n            return { ...state, imgs: [...action.payload] };\r\n\r\n        case ERROR_DATA:\r\n            return state;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}