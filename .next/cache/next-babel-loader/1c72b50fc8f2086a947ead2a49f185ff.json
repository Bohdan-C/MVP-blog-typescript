{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initialState = {\n  posts: []\n};\nexport var getPostsReducer = function getPostsReducer(action) {\n  return createReducer(initialState, _defineProperty({}, action.getAllPosts, function (state, _ref) {\n    var payload = _ref.payload;\n    return _objectSpread(_objectSpread({}, state), {}, {\n      tasks: payload\n    });\n  }));\n};","map":{"version":3,"sources":["C:/mvp-blog-typescript/src/redux/reducers/reducer.ts"],"names":["initialState","posts","getPostsReducer","action","createReducer","getAllPosts","state","payload","tasks"],"mappings":";;;;;;AAMA,IAAMA,YAA2B,GAAG;AAChCC,EAAAA,KAAK,EAAE;AADyB,CAApC;AAIA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,MAAD;AAAA,SAAYC,aAAa,CAACJ,YAAD,sBACnDG,MAAM,CAACE,WAD4C,EAC9B,UAACC,KAAD,QAAwB;AAAA,QAAdC,OAAc,QAAdA,OAAc;AAC5C,2CAAYD,KAAZ;AAAmBE,MAAAA,KAAK,EAAED;AAA1B;AACD,GAHmD,EAAzB;AAAA,CAAxB","sourcesContent":["\r\n\r\ninterface InitialStateI {\r\n    posts: any\r\n}\r\n\r\nconst initialState: InitialStateI = {\r\n    posts: [],\r\n  };\r\n\r\nexport const getPostsReducer = (action) => createReducer(initialState, {\r\n    [action.getAllPosts]: (state, { payload }) => {\r\n      return { ...state, tasks: payload };\r\n    },\r\n})"]},"metadata":{},"sourceType":"module"}